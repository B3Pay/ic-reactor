import { createActorManager, createCandidAdapter } from "@ic-reactor/core"
import { useCallback, useEffect, useMemo, useState } from "react"
import { useAgentManager } from "../provider/agent"
import { BaseActor } from "../types"
import { UseReactorOptions, UseReactorReturn, UseReactorState } from "./types"
import { getActorHooks } from "../helpers"

/**
 * A comprehensive hook that manages both the fetching of Candid interfaces
 * and the initialization of actor stores for Internet Computer (IC) canisters.
 * It simplifies the process of interacting with canisters by encapsulating
 * the logic for Candid retrieval and actor store management.
 *
 * By using this hook, you can create have full control over the lifecycle of
 * the actor store and the Candid interface. This hook is useful when you need
 * to manage the lifecycle of the actor store and Candid interface yourself.
 *
 * @example
 * ```tsx
 * import { AgentProvider, extractActorHooks, useReactor } from "@ic-reactor/react"
 * import { createContext } from "react"
 * import type { ActorHooks } from "@ic-reactor/react/dist/types"
 * // With this import, you can have type safety for the actor's interface.
 * // You can get it from the `.did.d.ts` file generated by the DFX tool.
 * // or from dashboard https://dashboard.internetcomputer.org/canisters/<canister-id>
 * import type { Ledger } from "../declarations/ledger"
 *
 * const ActorContext = createContext<ActorHooks<Ledger> | null>(null)
 *
 * const { useQueryCall } = extractActorHooks(ActorContext)
 *
 * const Reactor = () => {
 *   const { hooks, fetching, fetchError } = useReactor<Ledger>({
 *     canisterId: "ryjl3-tyaaa-aaaaa-aaaba-cai",
 *   })
 *
 *   return (
 *     <ActorContext.Provider value={hooks}>
 *       <h2>IC Canister Interaction</h2>
 *       {fetching && <p>Loading Candid interface...</p>}
 *       {fetchError && <p>Error: {fetchError}</p>}
 *       {hooks && <CanisterName />}
 *     </ActorContext.Provider>
 *   )
 * }
 *
 * const CanisterName = () => {
 *   const { data } = useQueryCall({
 *     functionName: "name",
 *   })
 *
 *   return (
 *     <div>
 *       <h3>Query Call</h3>
 *       <p>Result: {JSON.stringify(data)}</p>
 *     </div>
 *   )
 * }
 *
 * const App = () => (
 *   <AgentProvider withDevtools>
 *     <Reactor />
 *   </AgentProvider>
 * )
 *
 * export default App
 *
 * ```
 */
export const useReactor = <A = BaseActor>({
  canisterId,
  agentContext,
  idlFactory: maybeIdlFactory,
  didjsCanisterId,
  ...config
}: UseReactorOptions): UseReactorReturn<A> => {
  const [{ idlFactory, fetching, fetchError }, setState] =
    useState<UseReactorState>({
      idlFactory: maybeIdlFactory,
      fetching: false,
      fetchError: null,
    })

  const agentManager = useAgentManager(agentContext)

  const fetchCandid = useCallback(async () => {
    if (!canisterId) return

    setState({
      idlFactory: undefined,
      fetching: true,
      fetchError: null,
    })

    try {
      const candidManager = createCandidAdapter({
        agentManager,
        didjsCanisterId,
      })
      const { idlFactory } = await candidManager.getCandidDefinition(canisterId)

      setState({
        idlFactory,
        fetching: false,
        fetchError: null,
      })

      return idlFactory
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error(err)
      setState({
        idlFactory: undefined,
        fetchError: `Error fetching canister ${canisterId}`,
        fetching: false,
      })
    }
  }, [canisterId, didjsCanisterId, agentManager])

  // Automatically fetch Candid if not already fetched or provided.
  useEffect(() => {
    if (!fetching && !idlFactory) {
      fetchCandid()
    }
  }, [fetchCandid])

  const hooks = useMemo(() => {
    if (!idlFactory) return null

    const actorManager = createActorManager<A>({
      agentManager,
      idlFactory,
      canisterId,
      ...config,
    })

    return getActorHooks(actorManager)
  }, [idlFactory])

  return { hooks, fetching, fetchError }
}
