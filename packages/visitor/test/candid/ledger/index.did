type Account = record { owner : principal; subaccount : opt vec nat8 };
type GetBlocksArgs = record { start : nat64; length : nat64 };
type BlockRange = record { blocks : vec CandidBlock };
type TimeStamp = record { timestamp_nanos : nat64 };
type CandidBlock = record {
    transaction : CandidTransaction;
    timestamp : TimeStamp;
    parent_hash : opt vec nat8
};
type CandidOperation = variant {
    Approve : record {
        fee : Tokens;
        from : vec nat8;
        allowance_e8s : int;
        allowance : Tokens;
        expected_allowance : opt Tokens;
        expires_at : opt TimeStamp;
        spender : vec nat8
    };
    Burn : record { from : vec nat8; amount : Tokens; spender : opt vec nat8 };
    Mint : record { to : vec nat8; amount : Tokens };
    Transfer : record {
        to : vec nat8;
        fee : Tokens;
        from : vec nat8;
        amount : Tokens;
        spender : opt vec nat8
    }
};
type CandidTransaction = record {
    memo : nat64;
    icrc1_memo : opt vec nat8;
    operation : opt CandidOperation;
    created_at_time : TimeStamp
};
type QueryBlocksResponse = record {
    certificate : opt vec nat8;
    blocks : vec CandidBlock;
    chain_length : nat64;
    first_block_index : nat64;
    archived_blocks : vec ArchivedBlocksRange
};
type ArchivedBlocksRange = record {
    callback : func(GetBlocksArgs) -> (Result_3) query;
    start : nat64;
    length : nat64
};

service : (LedgerCanisterPayload) -> {
    icrc1_balance_of : (Account) -> (nat) query;
    query_blocks : (GetBlocksArgs) -> (QueryBlocksResponse) query
}
